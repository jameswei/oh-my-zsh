#compdef lid-client
typeset -A opt_args
local context state line ret curcontext="$curcontext"
#  generate_group_completions for main
_arguments -S -C "*:: :->main_subcommand" ": :((control\:'stop, start, or uninstall a product' run\:'Run a short-lived job' rollback\:'Rollback a product' request\:'View or cancel a deployment request' deploy\:'Deploy a product'))" "--debug[Enable debug logging]:debug:" "--log[Log file destination]:log:"
if [[ $state == main_subcommand ]]
then

case ${line[1]} in
control )
_arguments -S "--retry[Number of times to retry.]:retry:" "-n[Perform a local dry run]:n:" "--dry-run[Perform a local dry run]:dry-run:" "--force[Skip inOps health checks.]:force:" "--simulate[Perform a distributed dry run on remote hosts]:simulate:" "--service-guard-override[Override ServiceGuard feature.]:service-guard-override:" "--skip-hooks[Skip execution of any Deployment Hooks.]:skip-hooks:" "--success-threshold[Minimum per-instance (i00x) host success threshold, allowing a failed request to be treated as successful when met]:success-threshold:" "--instance-concurrency[Can use batching eg: 10 or percentages: 25% for instances/plans to run concurrently]:instance-concurrency:" "--host-concurrency[Can use batching eg: 10 or percentages: 25% for hosts to run concurrently]:host-concurrency:" "-t[Create a request for each product tag]:t:" "--product-tags[Create a request for each product tag]:product-tags:" "-i[Scope the deployment to one or more instance(s)]:i:" "--instances[Scope the deployment to one or more instance(s)]:instances:" "-H[Scope the deployment to one or more host(s)]:H:" "--hosts[Scope the deployment to one or more host(s)]:hosts:" "-a[Scope the deployment to one or more application(s)]:a:" "--applications[Scope the deployment to one or more application(s)]:applications:" "--fabric[Comma-separated Fabric names]:fabric:_fabrics" "--fabrics[Comma-separated Fabric names]:fabrics:_fabrics" "-f[Comma-separated Fabric names]:f:_fabrics" "--fabric-group[The comma-separated FabricGroup names]:fabric-group:" "-fg[The comma-separated FabricGroup names]:fg:" ": : _message 'action = ACTION'" ": : _message 'name = NAME'"
;;
run )
_arguments -S "--retry[Number of times to retry.]:retry:" "-n[Perform a local dry run]:n:" "--dry-run[Perform a local dry run]:dry-run:" "--force[Skip inOps health checks.]:force:" "--simulate[Perform a distributed dry run on remote hosts]:simulate:" "--service-guard-override[Override ServiceGuard feature.]:service-guard-override:" "--skip-hooks[Skip execution of any Deployment Hooks.]:skip-hooks:" "--success-threshold[Minimum per-instance (i00x) host success threshold, allowing a failed request to be treated as successful when met]:success-threshold:" "--instance-concurrency[Can use batching eg: 10 or percentages: 25% for instances/plans to run concurrently]:instance-concurrency:" "--host-concurrency[Can use batching eg: 10 or percentages: 25% for hosts to run concurrently]:host-concurrency:" "-t[Create a request for each product tag]:t:" "--product-tags[Create a request for each product tag]:product-tags:" "-i[Scope the deployment to one or more instance(s)]:i:" "--instances[Scope the deployment to one or more instance(s)]:instances:" "-H[Scope the deployment to one or more host(s)]:H:" "--hosts[Scope the deployment to one or more host(s)]:hosts:" "-a[Scope the deployment to one or more application(s)]:a:" "--applications[Scope the deployment to one or more application(s)]:applications:" "--fabric[Comma-separated Fabric names]:fabric:_fabrics" "--fabrics[Comma-separated Fabric names]:fabrics:_fabrics" "-f[Comma-separated Fabric names]:f:_fabrics" "--fabric-group[The comma-separated FabricGroup names]:fabric-group:" "-fg[The comma-separated FabricGroup names]:fg:" "-v[The version of the multi-product to deploy.]:v:" "--version[The version of the multi-product to deploy.]:version:" "--run-timeout[The time (in seconds) to wait for the job to complete.]:run-timeout:" "-r[Comment-delimited key-value pairs: e.g]:r:" "--run-arguments[Comment-delimited key-value pairs: e.g]:run-arguments:" ": : _message 'name = NAME'"
;;
rollback )
_arguments -S "--retry[Number of times to retry.]:retry:" "-n[Perform a local dry run]:n:" "--dry-run[Perform a local dry run]:dry-run:" "--force[Skip inOps health checks.]:force:" "--simulate[Perform a distributed dry run on remote hosts]:simulate:" "--service-guard-override[Override ServiceGuard feature.]:service-guard-override:" "--skip-hooks[Skip execution of any Deployment Hooks.]:skip-hooks:" "--success-threshold[Minimum per-instance (i00x) host success threshold, allowing a failed request to be treated as successful when met]:success-threshold:" "--instance-concurrency[Can use batching eg: 10 or percentages: 25% for instances/plans to run concurrently]:instance-concurrency:" "--host-concurrency[Can use batching eg: 10 or percentages: 25% for hosts to run concurrently]:host-concurrency:" "-t[Create a request for each product tag]:t:" "--product-tags[Create a request for each product tag]:product-tags:" "-i[Scope the deployment to one or more instance(s)]:i:" "--instances[Scope the deployment to one or more instance(s)]:instances:" "-H[Scope the deployment to one or more host(s)]:H:" "--hosts[Scope the deployment to one or more host(s)]:hosts:" "-a[Scope the deployment to one or more application(s)]:a:" "--applications[Scope the deployment to one or more application(s)]:applications:" "--fabric[Comma-separated Fabric names]:fabric:_fabrics" "--fabrics[Comma-separated Fabric names]:fabrics:_fabrics" "-f[Comma-separated Fabric names]:f:_fabrics" "--fabric-group[The comma-separated FabricGroup names]:fabric-group:" "-fg[The comma-separated FabricGroup names]:fg:" "-v[The previous version of the multi-product to rollback to.]:v:" "--version[The previous version of the multi-product to rollback to.]:version:" "--all[Rollback everything including canaries.]:all:" "--canary[Rollback a canary.]:canary:" "--reuse-config[Reuse configs that were compiled and published last.]:reuse-config:" "--reuse-artifacts-on-host[Rollback to a previous installation on the host]:reuse-artifacts-on-host:" "--converge[Target only hosts with inconsistent versions.]:converge:" ": : _message 'name = NAME'"
;;
request )
#  generate_group_completions for request
_arguments -S -C "*:: :->request_subcommand" ": :((cancel\:'Cancel the specified deployment request(s) for the stated reason' log\:'Retrieve the deployment processor log for the specified request(s)'))" 
if [[ $state == request_subcommand ]]
then

case ${line[1]} in
cancel )
_arguments -S "-i[LIST]:i:" "--request-ids[LIST]:request-ids:" "-m[Reason for cancellation]:m:" "--message[Reason for cancellation]:message:" "--fabric[Comma-separated Fabric names]:fabric:_fabrics" "--fabrics[Comma-separated Fabric names]:fabrics:_fabrics" "-f[Comma-separated Fabric names]:f:_fabrics" "--fabric-group[The comma-separated FabricGroup names]:fabric-group:" "-fg[The comma-separated FabricGroup names]:fg:"
;;
log )
_arguments -S "-i[LIST]:i:" "--request-ids[LIST]:request-ids:" "--fabric[Comma-separated Fabric names]:fabric:_fabrics" "--fabrics[Comma-separated Fabric names]:fabrics:_fabrics" "-f[Comma-separated Fabric names]:f:_fabrics" "--fabric-group[The comma-separated FabricGroup names]:fabric-group:" "-fg[The comma-separated FabricGroup names]:fg:"
;;
* )
_message "No known completions"
;;
esac
fi
;;
deploy )
_arguments -S "--retry[Number of times to retry.]:retry:" "-n[Perform a local dry run]:n:" "--dry-run[Perform a local dry run]:dry-run:" "--force[Skip inOps health checks.]:force:" "--simulate[Perform a distributed dry run on remote hosts]:simulate:" "--service-guard-override[Override ServiceGuard feature.]:service-guard-override:" "--skip-hooks[Skip execution of any Deployment Hooks.]:skip-hooks:" "--success-threshold[Minimum per-instance (i00x) host success threshold, allowing a failed request to be treated as successful when met]:success-threshold:" "--instance-concurrency[Can use batching eg: 10 or percentages: 25% for instances/plans to run concurrently]:instance-concurrency:" "--host-concurrency[Can use batching eg: 10 or percentages: 25% for hosts to run concurrently]:host-concurrency:" "-t[Create a request for each product tag]:t:" "--product-tags[Create a request for each product tag]:product-tags:" "-i[Scope the deployment to one or more instance(s)]:i:" "--instances[Scope the deployment to one or more instance(s)]:instances:" "-H[Scope the deployment to one or more host(s)]:H:" "--hosts[Scope the deployment to one or more host(s)]:hosts:" "-a[Scope the deployment to one or more application(s)]:a:" "--applications[Scope the deployment to one or more application(s)]:applications:" "--fabric[Comma-separated Fabric names]:fabric:_fabrics" "--fabrics[Comma-separated Fabric names]:fabrics:_fabrics" "-f[Comma-separated Fabric names]:f:_fabrics" "--fabric-group[The comma-separated FabricGroup names]:fabric-group:" "-fg[The comma-separated FabricGroup names]:fg:" "-v[The version of the multi-product to deploy]:v:" "--version[The version of the multi-product to deploy]:version:" "--canary[Deploy a canary.]:canary:" "--promote[Promote a validated canary.]:promote:" "--moratorium-override[Reason for overriding current deployment moratorium.]:moratorium-override:" "--config[Deploy only configs.]:config:" "--live-config[Deploy live configuration without restarting application]:live-config:" "--config-tags[Used with --config or --live-config only]:config-tags:" "--reuse-config[Reuse configs that were compiled and published last.]:reuse-config:" "--no-stop-start[Skip stop and start steps.]:no-stop-start:" "--v3[Use Topology v3 instead of v2 for testing v3 migration]:v3:" "--converge[Target only hosts with inconsistent versions.]:converge:" ": : _message 'name = NAME'"
;;
* )
_message "No known completions"
;;
esac
fi
compdef _lid-client lid-client
